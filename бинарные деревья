import random
import time
import pandas as pd

class BinTree:
    def __init__(self, key = None, left_child = None, right_child = None, parent = None): 
        self.key = key                   # значение, которое подается в дерево
        self.left_child = left_child     # левый потомок
        self.right_child = right_child   # правый потомок
        self.parent = parent             # родитель

    def entering(self, key):                # Функция вставки значения в дерево
        if self.key is None:
            self.key = key
        
        if key <= self.key:
            if self.left_child is None:
                self.left_child = BinTree(key)
            else:
                self.left_child.entering(key)
                
        elif key >= self.key:
            if self.right_child is None:
                self.right_child = BinTree(key)
            else:
                self.right_child.entering(key)

    
     def minimal_child(self, key): #минимальный потомок
         min_child = key
         while(min_child.left_child is not None):
             min_child = min_child.left_child
         return min_child
    
    def maximum_child(self, key): #максимальный потомок
        max_child = key
        while(max_child.right_child is not None):
            max_child = max_child.right_child
        return max_child
                   
    def finding_el(self, key): #функция на проверку элемента в дереве
        if key == self.key:
            return True
        elif key < self.key:
            if self.left_child:
                return self.left_child.finding_el(key)
            else:
                return False
        else:
            if self.right_child:
                return self.right_child.finding_el(key)
            else:
                return False

def printTree(start, level=0,): #вывод дерева
    if start != None:
        printTree(start.right_child, level + 1,)
        print(' ' * 5 * level , '==>' , start.key)
        printTree(start.left_child, level + 1)
        
mass = random.sample(range(1, 50), 25)
tree = BinTree(mass[0])
for el in mass[1:]:
    tree.entering(el)
print(mass)
new_tree = printTree(tree)

def into_mass(branch, mass):
    if branch:
        into_mass(branch.left_child, mass)
        mass.append(branch.key)
        into_mass(branch.right_child, mass)
    return mass

def creating_tree_into_mass(start, end):
    new_tree = BinTree()
    for i in range(start - 1):
        a = random.randint(1, end)
        new_tree.entering(a)
    return new_tree
    
tr = creating_tree_into_mass(10, 50)
mass = []
into_mass(tr, mass)

tr1 = creating_tree_into_mass(1000,500)
starting_time = time.perf_counter()
into_mass(tr1, mass)
ending1 = time.perf_counter() - starting_time
ending1

tr2 = creating_tree_into_mass(5000,500)
starting_time = time.perf_counter()
into_mass(tr2, mass)
ending2 = time.perf_counter() - starting_time
ending2

tr3 = creating_tree_into_mass(10000,500)
starting_time = time.perf_counter()
into_mass(tr3, mass)
ending3 = time.perf_counter() - starting_time
ending3

tr4 = creating_tree_into_mass(1000,1000)
starting_time = time.perf_counter()
into_mass(tr4, mass)
ending4 = time.perf_counter() - starting_time
ending4

tr5 = creating_tree_into_mass(5000,1000)
starting_time = time.perf_counter()
into_mass(tr5,mass)
ending5 = time.perf_counter() - starting_time
ending5

tr6 = creating_tree_into_mass(10000,1000)
starting_time = time.perf_counter()
into_mass(tr6, mass)
ending6 = time.perf_counter() - starting_time
ending6

df = pd.DataFrame(columns=["Кол-во элементов в дереве и в массиве", 'Диапозон', 'Время работы алгоритма с деревом', 'Время работы алгоритма с массивом'])
a = [1000, 1000, 5000, 5000, 10000, 10000]

for i in range(len(a)):
    df.loc[i,'Кол-во элементов в дереве и в массиве'] = a[i]
    
    if i % 2 == 0:
        df.loc[i,'Диапозон'] = "от 1 до 500"
    else:
        df.loc[i,'Диапозон'] = "от 1 до 10000"
df.loc[0,'Время работы алгоритма с деревом'] = ending1
df.loc[1,'Время работы алгоритма с деревом'] = ending2
df.loc[2,'Время работы алгоритма с деревом'] = ending3
df.loc[3,'Время работы алгоритма с деревом'] = ending4
df.loc[4,'Время работы алгоритма с деревом'] = ending5
df.loc[5,'Время работы алгоритма с деревом'] = ending6
df

def height_of_tree(key): #функция поиска высоты дерева
    if not key:
        return 0
    return max(height_of_tree(key.left_child), height_of_tree(key.right_child)) + 1

lsttt = [random.randint(1, 100) for _ in range(25)]
tree = BinTree(lsttt[0])
for i in lsttt[1:]:
    tree.entering(i)
printTree(tree)
print(f'Высота Дерева: {height_of_tree(tree)}')

def minimal_child(key):
    if key.left_child is not None:
        return minimal_child(key.left_child)
    else:
        return key

def delete(root, key):
    if root is None:
        return None
 
    if key < root.key:
        root.left_child = delete(root.left_child, key)
        return root
    elif key > root.key:
        root.right_child = delete(root.right_child, key)
        return root
 
    # root.key == x
    if root.left_child is None:
        return root.right_child
    elif root.right_child is None:
        return root.left_child
    else:
        # both subtrees are present
        min_key = minimal_child(root.right_child).key
        root.key = min_key
        root.right_child = delete(root.right_child, min_key)
        return root
        
new_mass = [random.randint(1, 50) for i in range(10)]
new_tree = BinTree(new_mass[0])
for i in new_mass[1:]:
    new_tree.entering(i)
print(new_mass)
printTree(new_tree)

X = int(input('Введите число, чтобы удалить его из дерева:'))
if new_tree.finding_el(X):
    new_tree = delete(new_tree, X)
    printTree(new_tree)
else:
    print('Такого элемента нет в дереве!')
