import random

class Hash:

    def __init__(self, table_size):
        self.hash_table = {}
        self.table_size = table_size
        
    def create_table(self):
        i = 0
        while i < self.table_size:
            self.hash_table[i] = [None]
            i += 1
            
    def print_table(self):
        for k, v in self.hash_table.items():
            print(k, end=' --> ')
            print(v, sep=' -- ', end = '\n')
            print()
            
    def insert(self, value):
        key = self.hashing(value[0])
        if self.hash_table[key][0] == None:
            self.hash_table[key].remove(self.hash_table[key][0])
            self.hash_table[key] = [value] + self.hash_table.get(key, [])
        else:
            self.hash_table[key] = [value] + self.hash_table.get(key, [])
            
    def hashing(self, key):
        return key%self.table_size
            
    def delete(self, key):
        hash_key = self.hashing(key)
        if self.hash_table[hash_key][0] != None:
            for el in self.hash_table[hash_key]:
                if el[0] == key:
                    self.hash_table[hash_key].remove(el)
                    if len(self.hash_table[hash_key]) == 0:
                        self.hash_table[hash_key].append(None)
            
    def find(self, key):
        hash_key = self.hashing(key)
        for el in self.hash_table[hash_key]:
            if el[0] == key:
                print(f"{hash_key} --> {el}")  
def gen_value():
    alp = [chr(el) for el in range(32, 250)]
    res = ''
    for _ in range(random.randint(5, 30)):
        res += random.choice(alp)
    return res
    
table = Hash(1000)
table.create_table()
table.print_table()

for key in set([random.randint(1,1000000) for el in range(100000)]):
    val = gen_value()
    #print(key, val)
    table.insert((key, val))
table.print_table()

count_zap = 0 #Коэффицент заполнения
for k, v in table.hash_table.items():
    if v[0] != None:
        count_zap += 1
print(count_zap/table.table_size)

count_max = 0 #Длина самой длинной цепочки
for k, v in table.hash_table.items():
    if len(v) > count_max:
        count_max = len(v)
print(count_max)

count_min = 100000000 #Длина самой короткой цепочки
for k, v in table.hash_table.items():
    if len(v) < count_min:
        count_min = len(v)
print(count_min)

class Hash_op_adr:

    def __init__(self, table_size):
        self.hash_table = {}
        self.table_size = table_size
        
    def create_table(self):
        i = 0
        while i < self.table_size:
            self.hash_table[i] = (None)
            i += 1
            
    def print_table(self):
        for k, v in self.hash_table.items():
            print(k, end=' --> ')
            print(v, sep=' -- ', end = '\n')
            print()

    def hashing(self, key):
        return key%self.table_size
              
    def insert(self, value):
        hash_key = self.hashing(value[0])

        while self.hash_table[hash_key] != None:
            if hash_key == self.table_size-1:
                hash_key = -1
                
            hash_key += 1
            
        self.hash_table[hash_key] = value

            
    def delete(self, key):
        hash_key = self.hashing(key)
        while self.hash_table[hash_key][0] != key:
            hash_key += 1
        self.hash_table[hash_key] = (None)
        
    def find(self, key):
        hash_key = self.hashing(key)
        count = 0
        while self.hash_table[hash_key][0] != key:
            hash_key += 1
        print(f'{hash_key} --> {self.hash_table[hash_key]}')
        
table1 = Hash_op_adr(10000)
table1.create_table()
table1.print_table()

for key in set([random.randint(1,1000000) for el in range(9000)]):
    #print(key)
    val = gen_value()
    #print(key, val)
    table1.insert((key, val))
table1.print_table()

count = 0 #Поиск самого большего кластера
clast = 0
for k, v in table1.hash_table.items():
    if v == None:
        if count > clast:
            clast = count
        count = 0  
    else:
        count += 1    
print(clast)
